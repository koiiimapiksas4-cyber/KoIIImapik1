import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import os
import glob
from datetime import datetime, timedelta
from st.cache_data(ttl=60) import st.cache_data

st.set_page_config(layout="wide", page_title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ—ñ–∫—É")

st.title("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ—ñ–∫—É –≤–µ–±—Å–∞–π—Ç—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)")

# --- –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥ ---
count = st_autorefresh(interval=60*1000, limit=None, key="data_refresh")

# --- –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó CSV —É —Ñ–∞–π–ª ---
def generate_sample_csv_file(filename="sample_data.csv", n_days=10):
    start_date = datetime.today() - timedelta(days=n_days-1)
    dates = [start_date + timedelta(days=i) for i in range(n_days)]
    
    sources = ['organic', 'direct', 'referral', 'social', 'email']
    devices = ['desktop', 'mobile', 'tablet']
    
    rows = []
    np.random.seed(42)
    
    for d in dates:
        for s in sources:
            sessions = max(0, int(np.random.poisson(1000)))
            users = int(sessions * (0.9 - 0.1 * np.random.rand()))
            pageviews = int(sessions * (1.5 + 0.5 * np.random.rand()))
            bounce_rate = np.clip(0.3 + 0.2 * np.random.rand(), 0, 1)
            avg_session_duration = abs(np.random.normal(120, 30))
            device = np.random.choice(devices, p=[0.55, 0.35, 0.10])
            
            rows.append({
                "date": d.strftime("%Y-%m-%d"),
                "sessions": sessions,
                "users": users,
                "pageviews": pageviews,
                "bounce_rate": round(bounce_rate, 3),
                "avg_session_duration": int(avg_session_duration),
                "source": s,
                "medium": "organic" if s=="organic" else ("social" if s=="social" else "referral"),
                "device_category": device
            })
    
    df = pd.DataFrame(rows)
    df.to_csv(filename, index=False)
    st.info(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–∫–ª–∞–¥–Ω—ñ –¥–∞–Ω—ñ")
    return df

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV –∑ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º ---
@st.cache_data(ttl=60)
def load_data_auto():
    csv_files = glob.glob("*.csv")
    if csv_files:
        latest_file = max(csv_files, key=os.path.getctime)
        st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ CSV-—Ñ–∞–π–ª: {latest_file}")
        df = pd.read_csv(latest_file)
    else:
        df = generate_sample_csv_file()
    return df

df = load_data_auto()

# --- –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ ---
df.columns = [c.strip() for c in df.columns]
if 'date' in df.columns:
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
else:
    st.error("–§–∞–π–ª –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫—É 'date'")
    st.stop()

for col in ['sessions', 'users', 'pageviews', 'bounce_rate', 'avg_session_duration']:
    if col not in df.columns:
        df[col] = 0
    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

for col in ['source', 'device_category']:
    if col not in df.columns:
        df[col] = 'unknown'

# --- –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ ---
st.subheader("–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
st.metric("üìÖ –ü–µ—Ä—ñ–æ–¥", f"{df['date'].min().date()} ‚Äî {df['date'].max().date()}")
st.metric("üë• –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", f"{df['users'].sum():,}")
st.metric("üìà –°–µ—Å—ñ—ó", f"{df['sessions'].sum():,}")
st.metric("üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫", f"{df['pageviews'].sum():,}")

# --- –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ ---
st.subheader("–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å —É —á–∞—Å—ñ")
daily = df.groupby('date').agg({
    'sessions': 'sum',
    'users': 'sum',
    'pageviews': 'sum'
}).reset_index()

chart = (
    alt.Chart(daily)
    .transform_fold(['sessions', 'users', 'pageviews'], as_=['metric', 'value'])
    .mark_line(point=True)
    .encode(
        x='date:T',
        y='value:Q',
        color='metric:N',
        tooltip=['date:T', 'metric:N', 'value:Q']
    )
    .interactive()
    .properties(height=350)
)
st.altair_chart(chart, use_container_width=True)

# --- –î–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É ---
st.subheader("–î–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É")
source_agg = df.groupby(['date', 'source']).agg({'sessions': 'sum'}).reset_index()

area = (
    alt.Chart(source_agg)
    .mark_area()
    .encode(
        x='date:T',
        y=alt.Y('sessions:Q', stack='zero', title='–°–µ—Å—ñ—ó'),
        color='source:N',
        tooltip=['date:T', 'source:N', 'sessions:Q']
    )
    .interactive()
)
st.altair_chart(area, use_container_width=True)

# --- –ü—Ä–∏—Å—Ç—Ä–æ—ó ---
st.subheader("–°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–∞ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏")
device_agg = df.groupby('device_category').agg({
    'sessions': 'sum',
    'users': 'sum',
    'pageviews': 'sum'
}).reset_index()

st.table(device_agg)

bar = (
    alt.Chart(device_agg)
    .mark_bar()
    .encode(
        x='sessions:Q',
        y=alt.Y('device_category:N', sort='-x'),
        color='device_category:N',
        tooltip=['device_category', 'sessions', 'users', 'pageviews']
    )
)
st.altair_chart(bar, use_container_width=True)

# --- –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ matplotlib ---
st.subheader("–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ (–±–µ–∑ matplotlib)")

num_cols = ['sessions', 'users', 'pageviews', 'bounce_rate', 'avg_session_duration']
corr = df[num_cols].corr().round(3)

st.dataframe(corr)

corr_long = (
    corr.reset_index()
        .melt(id_vars='index', var_name='var2', value_name='corr')
        .rename(columns={'index': 'var1'})
)

heat = (
    alt.Chart(corr_long)
    .mark_rect()
    .encode(
        x='var1:N',
        y='var2:N',
        color=alt.Color('corr:Q', scale=alt.Scale(domain=[-1,1], scheme='redyellowblue')),
        tooltip=['var1','var2','corr']
    )
)

text = (
    alt.Chart(corr_long)
    .mark_text(size=12)
    .encode(
        x='var1:N',
        y='var2:N',
        text='corr:Q',
        color=alt.condition(alt.datum.corr > 0.5, alt.value('black'), alt.value('black'))
    )
)

st.altair_chart(heat + text, use_container_width=True)

st.caption("""
**–Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è:**  
- corr –±–ª–∏–∑—å–∫–æ 1 ‚Üí —Å–∏–ª—å–Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å  
- corr –±–ª–∏–∑—å–∫–æ -1 ‚Üí —Å–∏–ª—å–Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å  
- corr –±–ª–∏–∑—å–∫–æ 0 ‚Üí –ª—ñ–Ω—ñ–π–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –Ω–µ–º–∞—î
""")
